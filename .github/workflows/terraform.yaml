name: Terraform CI/CD Pipeline

on:
  # Dispara o pipeline em push ou pull request no branch main
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VERSION: 1.5.7 # Versão do Terraform a ser usada
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }} # Credenciais do Google Cloud
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT }} # Variável do projeto TF_VAR_project_id: ${{ secrets.GCP_PROJECT }}
  TF_VAR_service_name: n8n # Nome do serviço
  # TF_VAR_environment will be set per job
  TF_VAR_region: southamerica-east1 # Região

jobs:
  terraform_hml:
    name: 'Terraform HML' # Add a descriptive name
    runs-on: ubuntu-latest
    environment: hml # Links to the 'hml' environment, enforcing approval
    env:
      TF_VAR_environment: hml
    # 'on' triggers are at workflow level, job-level conditions might be needed for 'apply'
    steps:
      # 1. Fazer checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar o Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # 3. Configurar autenticação do Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GOOGLE_CREDENTIALS }}

      # 4. Inicializar o Terraform
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_VAR_project_id}-tfstate" -backend-config="prefix=${TF_VAR_service_name}/${TF_VAR_environment}"

      # 5. Validar o código Terraform
      - name: Terraform Validate
        run: terraform validate

      # 6. Planejar as alterações (terraform plan)
      - name: Terraform Plan HML
        run: terraform plan -var="project_id=${{ env.TF_VAR_project_id }}"                                 -var="service_name=${{ env.TF_VAR_service_name }}"                                 -var="environment=${{ env.TF_VAR_environment }}"                                 -var="region=${{ env.TF_VAR_region }}"
        id: plan_hml

      # 7. Aplicar as alterações (terraform apply) para HML
      # Apply should only happen on push to main, after approval (which is handled by environment: hml)
      - name: Terraform Apply HML
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve                                 -var="project_id=${{ env.TF_VAR_project_id }}"                                 -var="service_name=${{ env.TF_VAR_service_name }}"                                 -var="environment=${{ env.TF_VAR_environment }}"                                 -var="region=${{ env.TF_VAR_region }}"

  terraform_prd:
    name: 'Terraform PRD'
    runs-on: ubuntu-latest
    needs: terraform_hml
    environment: prd # Links to the 'prd' environment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      TF_VAR_environment: prd
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GOOGLE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_VAR_project_id}-tfstate" -backend-config="prefix=${TF_VAR_service_name}/${TF_VAR_environment}"

      # Terraform Validate is usually not strictly needed here if HML validated, but good for consistency
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan PRD
        run: terraform plan -var="project_id=${{ env.TF_VAR_project_id }}"                                 -var="service_name=${{ env.TF_VAR_service_name }}"                                 -var="environment=${{ env.TF_VAR_environment }}"                                 -var="region=${{ env.TF_VAR_region }}"
        id: plan_prd

      - name: Terraform Apply PRD
        # This job already has the condition for push to main
        run: terraform apply -auto-approve                                 -var="project_id=${{ env.TF_VAR_project_id }}"                                 -var="service_name=${{ env.TF_VAR_service_name }}"                                 -var="environment=${{ env.TF_VAR_environment }}"                                 -var="region=${{ env.TF_VAR_region }}"